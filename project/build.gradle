plugins {
    id 'java'
    id 'application'
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()
}

application {
    mainClass = 'odu.edu.cs.cs350.pne.IOReader'
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'com.opencsv:opencsv:5.7.1'
    testImplementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
    testImplementation 'org.apache.poi:poi-ooxml:4.1.2'

}

test {
    ignoreFailures = true
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Implementation-Title' : 'Enrollement Projection',
            'Implementaion-Version' : '1.0',
            'Main-Class' : 'edu.odu.cs.cs350.pne.IOReader'  
    }
    from { configurations.runtimeClasspath.collect {
        it.isDirectory() ? it : zipTree(it) }
    }
}

task copyDocs(type: Copy, dependsOn: javadoc){
    from(file('build/docs'))
    into(file('build/reports'))
}

task reports(type: Copy, dependsOn: 'build'){
    from file('src/main/html/')
    into file('build/reports/')
}

def pagesDir = file("${project.rootDir}/../website-temp").absolutePath

task clearPages(type: Delete) {
    delete pagesDir
}

task workTree(dependsOn: ['clearPages']) { 
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'workTree']) {
    from 'build/reports'
    into pagesDir
}


task copyWebsite (dependsOn: ['copyReports']) {
}

task commitWebsite (dependsOn: 'copyWebsite') {
    doLast {
        Date now = new Date()

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', '.', pagesDir]
            ignoreExitValue = true
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'commit', '-m', 'Updating webpages at ' + now.toString()]
            ignoreExitValue = true
        }
    }
}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports (type: Delete, dependsOn: 'pushWebsite') {
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    delete pagesDir
}
check.dependsOn(copyDocs)